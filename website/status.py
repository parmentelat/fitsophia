#!/usr/bin/env python3

import shutil
import glob
import sys
import os
import json
import datetime

def merge_dicts(*dict_args):
    """
    Given any number of dicts, shallow copy and merge into a new dictionary
    """
    result = {}
    for dictionary in dict_args:
        result.update(dictionary)
    return result


def modification_date(filename):
    """
    Return file modification datetime
    """
    t = os.path.getmtime(filename)
    date_time_file = datetime.datetime.fromtimestamp(t)
    return date_time_file.strftime('%Y-%m-%d %H:%M')


def import_node_status():
    """
    Import files generated by Nepi routine
    """
    
    source_dir = os.getcwd() + "/results_nepi_helper/"
    dest_dir   = os.getcwd() + '/markdown/'
    
    try:
        os.stat(dest_dir)
    except:
        os.mkdir(dest_dir)

    results = {}

    for filename in glob.glob(os.path.join(source_dir, '*.json')):
        shutil.copy(filename, dest_dir)
     
        filename_base = os.path.basename(filename).replace('.json', '')
        results.update({ filename_base : {'last_modified': str(modification_date(filename))} })

    file = open(dest_dir+'info_files.json', "w")
    file.write('info_files' + " = '" + json.dumps(results) + "'")
    file.close()


def translate_single_json_file():
    """
    Join all the results in one json file
    """

    source_dir = os.getcwd() + "/results_nepi/"
    dest_dir   = os.getcwd() + '/markdown/'  

    try:
        os.stat(dest_dir)
    except:
        os.mkdir(dest_dir)
        
    results = {}

    for node in range(1,38):
        results.update({node : {"id":"", "cmc_on_off":"off","control_ping":"off","control_ssh":"off","os_release":"fail"}})
        #results.update({node : {"id":"", "cmc_on_off":"","control_ping":"","data_ping":"","control_ssh":"","os_release":""}})
        
    temp = {}
    for file in glob.glob(os.path.join(source_dir, '*.json')):    
        with open(file) as data_file:
            data = json.load(data_file)
            file_name = os.path.basename(file)
            
            for k,v in data.items():
                
                if "multiple_results.json" in file_name:
                    pass
                    #element_from = "status"
                    #element_to   = "data_ping"
                    #value = v[element_from]
                    # if value == "fail":
                    #     value = "off"
                    # else:
                    #     value = "on"

                    #key   = int(k)
                    #results[key]["id"] = k
                    #results[key][element_to] = value

                elif "alive_results.json" in file_name:
                    element_from = "alive"
                    element_to   = "cmc_on_off"
                    value = v[element_from]
                    if value == "alive":
                        value = "on"
                    elif value == "fail":
                        value == "fail"
                    else:
                        value = "off"

                    key   = int(k)
                    results[key]["id"] = k
                    results[key][element_to] = value

                elif "answer_results.json" in file_name:
                    element_from = "answer"
                    element_to   = "control_ping"
                    value = v[element_from]
                    if value == "answer":
                        value = "on"
                    else:
                        value = "off"

                    key   = int(k)
                    results[key]["id"] = k
                    results[key][element_to] = value
                                    
                elif "info_results.json" in file_name:
                    element_from = "info"
                    element_to   = "os_release"
                    value = v[element_from]
                    if value == "fail" or value == "":
                        value = "fail"
                    elif "ubuntu 15" in value:
                        value = "ubuntu-15.04"
                    elif "ubuntu 14" in value:
                        value = "ubuntu-14.10"
                    elif "gnuradio" in value:
                        value = "fedora-21-gnuradio"
                    elif "fedora 21" in value:
                        value = "fedora-21"

                    key   = int(k)
                    results[key]["id"] = k
                    results[key][element_to] = value

                    # fake control of ssh connection - if we can connect the node without ssh key
                    element_from = "info"
                    element_to   = "control_ssh"
                    value = v[element_from]
                    if value == "fail" or value == "":
                        value = "off"
                    else:
                        value = "on"

                    key   = int(k)
                    results[key]["id"] = k
                    results[key][element_to] = value


    templist = []
    for k,v in results.items():
        templist.append(v) 

    with open(dest_dir+'r2lab-complete.json', 'w') as outfile:
        json.dump(templist, outfile)    


def main():
    import_node_status()
    translate_single_json_file()

    
if __name__ == '__main__':
    main()